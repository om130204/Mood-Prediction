# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MtlJZnq52Va86FgfQx0UVk80jLvvHfeU

Importing all the required libraries
"""

#ML MODEL FOR MOOD PREDICTION

import pandas as pd
import sklearn
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler
from sklearn import metrics
from sklearn.tree import DecisionTreeClassifier
"""Dataset retrieval

"""

try:
    data = pd.read_csv('Project_data_form3.csv', encoding='utf-8')
except UnicodeDecodeError:
    data = pd.read_csv('Project_data_form3.csv', encoding='ISO-8859-1')  # or encoding='latin1'

data.info()

data.shape

feature=["AG","Gender","Relationship","sleep_hours","How_you_are_feeling?","How_often_do_you_take_caffeine","Overthinking_a_lot_about_the_things_surrounding_us?","Do_you_face_trouble_concentrating_or_focusing_on_stuffs?"]
Prediction=["How_do_you_describe_your_current_mood?"]

X=data[feature].values
Y=data[Prediction].values

X_train, X_test, Y_train, Y_test = train_test_split(X,Y ,test_size=0.3,random_state=42)

model = LogisticRegression()

model.fit(X_train,Y_train)

y_pred = model.predict(X_test)

"""accuracy = metrics.accuracy_score(Y_test,y_pred)


print(f"Accuracy: {accuracy:.5f}")



"""





scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Create an instance of Decision Tree Classifier
model = DecisionTreeClassifier()

# Fit the model
model.fit(X_train,Y_train)

from sklearn.metrics import accuracy_score, classification_report

# Predictions
y_pred = model.predict(X_test)

# Evaluate
accuracy = accuracy_score(Y_test, y_pred)
report = classification_report(Y_test, y_pred)

print(f"Accuracy: {accuracy}")
print("Classification Report:\n", report)

# Assuming 'new_data' is a 2D array with values of the five questions for your new input
# new_data = [[q1,q2,q3,q4,q5,q6,q7,q8]]

# Use the trained classifier to predict the result for the new data
# predicted_result = model.predict(new_data)

# Print the predicted result
# print("Predicted Result:", predicted_result)
# # Get the decision path for the new data
# decision_path = model.decision_path(new_data)

# # Print the decision path
# print("Decision Path:", decision_path)
import requests
from bs4 import BeautifulSoup


from jinja2 import Environment, FileSystemLoader

template_loader = FileSystemLoader(searchpath='\project\form page\flask')
jinja_env = Environment(loader=template_loader)

from flask import Flask, render_template,request

app = Flask(__name__)

@app.route('/')
def index():
    return render_template('form.html')

@app.route('/', methods=['POST'])
def submit_form():
    q1=request.form["q1"]
    q2=request.form["q2"]
    q3=request.form["q3"]
    q4=request.form["q4"]
    q5=request.form["q5"]
    q6=request.form["q6"]
    q7=request.form["q7"]
    q8=request.form["q8"]
    l=[q1,q2,q3,q4,q5,q6,q7,q8]  
    print(l) 
    new_data = [[q1,q2,q3,q4,q5,q6,q7,q8]]
    predicted_result = model.predict(new_data)
    print("predicted:",predicted_result)
    #movie predication web scrapping
    # Input: Specify the emotion (e.g., "Anger" or "Happiness")

#Web page opening
    if predicted_result == 1 :
       page ="index_anxious.html"
    elif predicted_result == 2 :
        page ="index_delighted.html"
    elif predicted_result == 3 :
        page = "index_sad.html"
    else:
        page = "index_irritated.html"
        
    return render_template(page)

if __name__ == '__main__':
    app.run(debug=True)

